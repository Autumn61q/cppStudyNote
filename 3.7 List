链表：
  linked storage for data
  discontinuous storage structure in physical storage unit, the logical order of data elements is achieved through the linking of pointers in the linked list.
  组成：一系列结点
    结点：存储元素的数据域 && 存储下一个元素的指针域
  STL中的链表是一个双向循环链表
  优点：可以对任意位置快速插入和删除元素；动态存储分配，不会造成浪费和溢出
  缺点：遍历速度较慢；占用内存大
  因为链表的存储方式并不是连续的内存空间，所以链表中的迭代器只支持前移和后移，属于双向迭代器。不支持随机访问
    就是说
          list <int>::iterator it = l1.begin();
          it++; // 是ok的，只能这样一点一点++过去
          it += 1; // 是不ok的。主要是为了防止+=2  或者+=3， 这些都叫随机访问
  链表的重要性质就是插入和删除操作都不会造成原有迭代器失效（对比vector）

构造：
函数原型：
* `list<T> list;`                               //list采用采用模板类实现,对象的默认构造形式：
      list <int> l;
* `list(beg,end);`                           //构造函数将[beg, end)区间中的元素拷贝给本身。
* `list(n,elem);`                             //构造函数将n个elem拷贝给本身。
* `list(const list &lst);`            //拷贝构造函数。
      list <int> l2(l);

#### 3.7.3 list 赋值和交换

**功能描述：**

* 给list容器进行赋值，以及交换list容器

**函数原型：**
* `assign(beg, end);`            //将[beg, end)区间中的数据拷贝赋值给本身。
* `assign(n, elem);`              //将n个elem拷贝赋值给本身。
* `list& operator=(const list &lst);`         //重载等号操作符
* `swap(lst);`                         //将lst与本身的元素互换。
（也可以用等号直接赋值）

#### 3.7.4 list 大小操作

**功能描述：**

* 对list容器的大小进行操作



**函数原型：**

* `size(); `                             //返回容器中元素的个数

* `empty(); `                           //判断容器是否为空

* `resize(num);`                   //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。
  ​					    //如果容器变短，则末尾超出容器长度的元素被删除。

* `resize(num, elem); `       //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。
   			 	 	​					    //如果容器变短，则末尾超出容器长度的元素被删除


#### 3.7.5 list 插入和删除

**功能描述：**

* 对list容器进行数据的插入和删除



**函数原型：**

* push_back(elem);//在容器尾部加入一个元素
* pop_back();//删除容器中最后一个元素
* push_front(elem);//在容器开头插入一个元素
* pop_front();//从容器开头移除第一个元素
* insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。
* insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。
* insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。
  注：insert参数里面的pos要用迭代器表示。你直接写index是没用的。要写
      l1.insert(l1.begin(),9);
      而且你还不能对迭代器进行加减操作，比如l1.begin()+3; 尽管你可以
      写l1.begin()++，但你也只能这么写。多加几次就是说
* clear();//移除容器的所有数据
* erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置。
* erase(pos);//删除pos位置的数据，返回下一个数据的位置。
  注：pos也要用迭代器表示
    比如：
        list <int> :: iterator it = l1.begin();
        it++;
        l1.erase(it);  // 就是删除第一个元素
* remove(elem);//删除容器中所有与elem值匹配的元素。

3.7.6 list 数据存取
  对list容器中数据进行存取
  函数原型：
  front();        //返回第一个元素。
  back();         //返回最后一个元素。
    这两个函数不会把返回值顺道从链表里删除
  由于链表的实现原理，没有办法通过下标来访问list里面的元素


3.7.7 list 反转和排序
  函数原型：
    reverse();   //反转链表
    sort();       //链表排序，默认升序。降序的话看107行。无返回值
    （不支持随机访问迭代器的容器不能用标准算法，就是#include<algorithm>
      这个头文件里面的函数，但是这种容器会自己提供一些算法）

    bool myCompare(int v1, int v2){ // list是啥数据类型就用啥类型的v1和v2
    // 降序，就让第一个数大于第二个数
    return v1 > v2;
    }

    int main()
    {
        list<int> l1;
        l1.push_back(1);
        l1.push_back(2);
        l1.push_back(3);
        l1.push_back(2);
        l1.sort(myCompare);
      	return 0;
      }
