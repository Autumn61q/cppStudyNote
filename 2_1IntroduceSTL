1.STL的出现：
长久以来，软件界一直希望建立一种可重复利用的东西
cpp的面向对象和泛型编程思想，目的就是复用性的提升
大多数情况下，数据和算法都未能有一套标准，导致被迫从事大量重复工作
为了建立数据结构和算法的一套标准，诞生了STL

2.STL基本概念
standard template library 标准模板库
从广义上分为容器container,算法algorithm,迭代器iterator
容器和算法之间通过迭代器无缝连接
STL几乎所有代码都采用了模板类或者模板函数

3.STL大体分为六大组件，分别是容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器：

容器包括序列式容器（vector、list、deque）和关联式容器（set、map、multiset、multimap）。
迭代器是一种抽象的概念，用于遍历容器中的元素。
算法是对容器中的元素进行操作的函数，如排序、查找、复制等。
函数对象是一种可调用的对象，可以像函数一样使用，可用作算法的某种策略。
适配器是一种用于修改容器或者仿函数或者迭代器接口的工具，如stack、queue、priority_queue等。
分配器是一种用于管理内存分配的工具，可以自定义分配器以满足特定需求。

4.
容器：
放东西的。STL容器就是将运用最广泛的数据结构实现出来
常用的有：数组、链表、树、栈、队列、集合、映射表等
容器分为序列式容器和关联式容器两种：
  前者：强调值的排序，序列式容器中每个容器都有固定位置
  后者：二叉树结构，个元素之间没有严格的物理上的顺序关系

算法:
问题的解法。解决逻辑或数学上的问题，这门学科叫做算法。
算法分为：质变算法和非质变算法
质变：指运算过程中会更改区间内的元素内容。如拷贝、替换、删除等。
非质变：运算过程中不会更改区间内的元素内容，如查找、计数、遍历、寻找极值等。

迭代器：
容器和算法之间的粘合剂。
提供一种方法，使之能够一次寻访某个容器中所含的各个元素，而又无需暴露该容器内部的表示方式。
每个容器都有自己专属的迭代器。
迭代器非常类似于指针，初学阶段可理解为指针。
迭代器可分为5种：（后两者最常用）
    输入迭代器（Input Iterator）：只能一次向前读取元素，支持逐个遍历和对元素的读取。只读。支持++、==、！=
    输出迭代器（Output Iterator）：只能一次向前写入元素，支持逐个遍历和对元素的写入。只写。支持++
    前向迭代器（Forward Iterator）：组合了输入和输出迭代器的功能，支持向容器中的元素一次向前移动。读写。支持++、==、！=
    双向迭代器（Bidirectional Iterator）：组合了前向迭代器和逆向迭代器的功能，支持向容器中的元素一次向前、一次向后移动。读写。支持++、--
    随机访问迭代器（Random Access Iterator）：组合了双向迭代器的功能，支持O(1)时间复杂度对元素的随机位置访问，并支持对元素的读取。读写。支
                                           持++、--、[n]、-n、<、<=、>、>=
